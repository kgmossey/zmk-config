/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

#define AS(keycode) &as LS(keycode) keycode     // Autoshift Macro

/ {
    behaviors {
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
        dot_excl: dot_exclamation {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp EXCL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        comma_qmark: comma_question {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp QMARK>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };
    keymap {
        compatible = "zmk,keymap";

        default_layer {
// -----------------------------------------------------------------------------------------
// | ' " | , ? | . ! |  P  |  Y  |   |  F  |  G  |  C  |  R  |  L  |
// | A s | O c | E a | U m |  I  |   |  D  | H m | T a | N c | S s |
// |  ;  |  Q  |  J  |  K  |  X  |   |  B  |  M  |  W  |  V  |  Z  | 
//             | Tab | Bck | SPC |   | To2 | Spc | Ret |
   bindings = <
AS(SQT)	&comma_qmark	&dot_excl	&kp P	&kp Y	/**/	&kp F	&kp G	&kp C	&kp R	&kp L
&hm LSHIFT A	&hm LCTL O	&hm LALT E	&hm LMETA U	&kp I	/**/	&kp D	&hm RMETA H	&hm RALT T	&hm RCTL N	&hm RSHIFT S
AS(SEMI)	&kp Q	&kp J	&kp K	&kp X	/**/	&kp B	&kp M	&kp W	&kp V	&kp Z
		&mo 1	&kp TAB	&kp BSPC	/**/	&kp SPACE	&kp RET	&mo 2		
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// | ESC | GRV |  W  |  E  | p_u | /**/ |  *  |  7  |  8  |  9  |  -  |
// | TAB |  A  |  S  |  D  | p_d | /**/ |  /  |  4  |  5  |  6  |  +  |
// | TAB | BTC | BT0 | BT1 | BT3 | /**/ |  =  |  1  |  2  |  3  |  0  |
//             | non | trn | to0 | /**/ |  .  | trn | RET |
                        bindings = <
&kp ESC	AS(GRAVE)	&kp UP	&none	&kp PG_UP	/**/	&kp STAR	&kp 7	&kp 8	&kp 9	&kp MINUS
&kp TAB	&kp LEFT	&kp DOWN	&kp RIGHT	&kp PG_DN	/**/	&kp FSLH	&kp 4	&kp 5	&kp 6	&kp PLUS
&tog 1	&none	&none	&kp BSLH	&none	/**/	&kp EQUAL	&kp 1	&kp 2	&kp 3	&kp 0
		&to 0	&kp TAB	&kp BSPC	/**/	&kp DOT	&kp KP_ENTER	&mo 2		
                        >;
                };
                   
                raise_layer {
// -----------------------------------------------------------------------------------------
// |  !  |  @  |  #  |  $  |  %  | /**/ |  ^  |  &  |  *  |  (  |  )  |
// | TAB |  [  |  ]  |  {  |  }  | /**/ |  F1 |  F2 |  F3 |  F4 |  F5 |
// | non |  -  |  _  |  <  |  >  | /**/ |  F6 |  F7 |  F8 |  F0 | F10 |
//             | non | trn | non | /**/ | to0 | trn |  ~  |
                        bindings = <
&kp F1	&kp F2	&kp F3	&kp F4	&kp F5	/**/	&kp F6	&kp F7	&kp F8	&kp F9	&kp F10
&kp EXCL	&kp AT	&kp HASH	&kp DOLLAR	&kp PERCENT	/**/	&kp CARET	&kp AMPS	&kp STAR	&kp LPAR	&kp RPAR
&kp TILDE	&kp MINUS	&kp UNDER	&kp LT	&kp GT	/**/	&none	&kp LBKT	&kp RBKT	&kp LBRC	&kp RBRC
		&kp TAB	&to 2	&kp BSPC	/**/	&kp SPACE	&kp RET	&to 3		
                        >;
                };
btrgb_layer {
                        bindings = <
&bt BT_SEL 0	&bt BT_SEL 1	&bt BT_SEL 2	&bt BT_SEL 3	&bt BT_SEL 4	/**/	&rgb_ug RGB_ON	&rgb_ug RGB_HUI	&rgb_ug RGB_SAI	&rgb_ug RGB_BRI	&rgb_ug RGB_SPI
&to 1	&to 2	&to 3	&to 4	&to 5	/**/	&rgb_ug RGB_OFF	&rgb_ug RGB_HUD	&rgb_ug RGB_SAD	&rgb_ug RGB_BRD	&rgb_ug RGB_SPD
&none	&none	&none	&none	&none	/**/	&rgb_ug RGB_EFF	&rgb_ug RGB_EFR	&none	&none	&bt BT_CLR 
		&none	&none	&to 0	/**/	&to 0	&none	&none		

                        >;
		};
        };
};
